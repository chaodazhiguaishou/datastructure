//哈希表
// 设要存储的元素个数为n，设置一个长度为m（m≥n）的连续内存单元。
// 以每个元素的关键字ki（0≤i≤n-1）为自变量，通过一个哈希函数h把ki映射为内存单元的地址（或相对地址）h(ki)。
// 并把该元素存储在这个内存单元中。

/举例，将学生姓名学号成绩存在哈希表中，如果要查找学号为2018010的学生分数：
先计算h(2018010)=2018010-2018001=9，再取ha[9]元素的分数62即可。对应的查找时间为O(1)。

对于两个不同的关键字ki和kj（i≠j）出现h(ki)=h(kj)，这种现象称为哈希冲突。
将具有不同关键字而具有相同哈希地址的元素称为“同义词”，这种冲突也称为同义词冲突。

哈希函数构造方法：
构造哈希函数的目标：使得到的哈希地址尽可能均匀地分布在m个连续内存单元地址上，
同时使计算过程尽可能简单以达到尽可能高的时间效率。 根据关键字的结构和分布的不同，有多种构造哈希函数的方法。 
1.直接定址法
以关键字k本身或关键字加上某个数值常量c作为哈希地址的方法。即h(k)=k+c。 这种哈希函数计算简单，并且不可能有冲突发生。
当关键字的分布基本连续时，可用直接定址法的哈希函数；否则，若关键字分布不连续将造成内存单元的大量浪费。
2.除留余数法
用关键字k除以某个不大于哈希表长度m的数p所得的余数作为哈希地址的方法。
除留余数法的哈希函数h(k)为：h(k)=k mod p (mod为求余运算，p≤m)，其中p最好是质数（素数）保证冲突尽可能小。
3.数字分析法
适用于所有关键字都已知的情况，并对关键字每一位进行分析。比如一组多位数关键字，取每个关键字的最后两位作为哈希地址。

如果关键字是字符串，