#include <iostream>
#include <stdio.h>
using namespace std;

//1. 索引存储结构（索引存储结构  =  数据表 + 索引表）
// 索引存储结构是在采用数据表存储数据的同时，还建立附加的索引表。
// 索引表中的每一项称为索引项，索引项的一般形式为（关键字，地址），
// 其中，关键字唯一标识一个元素，地址为该关键字元素在数据表中的存储地址，整个索引表按关键字有序排列。

// 按关键字k的查找过程：
// 先在索引表按折半查找方法找到关键字为k的索引项，得到其地址，所花时间为O(log2n)。
// 再通过地址在数据表中找到对应的元素，所花时间为O(1)，合起来的查找时间为O(log2n)。

// 2. 分块查找
// 例如，设有一个线性表，其中包含25个元素，其关键字序列为：
// 8，14，6，9，10，22，34，18，19，31，40，38，54，66， 46，71，78，68，80，85， 100， 94，88，96，87　　
// 分块：将n=25个记录分为b=5块，每块中有s=5个元素。
// 分块查找过程：查找索引表（有序）：可以顺序查找块，也可以二分查找块。查找数据块（无序）：只能顺序查找块中元素。
// 查找关键字为k=80的元素
// （1）顺序查找索引表，比较4次
// （2）在对应块中查找，比较4次，共比较8次。


class Solution
{
public:

};

int main() {
    // insert code here...
};